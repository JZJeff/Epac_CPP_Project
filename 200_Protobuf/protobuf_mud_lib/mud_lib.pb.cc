// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mud_lib.proto

#include "mud_lib.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_character_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_enemy_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_enum_atribute_name_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_enum_character_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_enum_direction_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_location_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_player_mud_5flib_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mud_5flib_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tile_mud_5flib_2eproto;
namespace mud {
class playerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<player> _instance;
} _player_default_instance_;
class player_bookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<player_book> _instance;
} _player_book_default_instance_;
class enum_characterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<enum_character> _instance;
} _enum_character_default_instance_;
class enum_atribute_nameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<enum_atribute_name> _instance;
} _enum_atribute_name_default_instance_;
class enum_directionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<enum_direction> _instance;
} _enum_direction_default_instance_;
class characterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<character> _instance;
} _character_default_instance_;
class enemyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<enemy> _instance;
} _enemy_default_instance_;
class character_bookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<character_book> _instance;
} _character_book_default_instance_;
class enemy_bookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<enemy_book> _instance;
} _enemy_book_default_instance_;
class locationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<location> _instance;
} _location_default_instance_;
class tileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tile> _instance;
} _tile_default_instance_;
class tile_bookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tile_book> _instance;
} _tile_book_default_instance_;
}  // namespace mud
static void InitDefaultsscc_info_character_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_character_default_instance_;
    new (ptr) ::mud::character();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::character::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_character_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_character_mud_5flib_2eproto}, {
      &scc_info_enum_direction_mud_5flib_2eproto.base,
      &scc_info_enum_atribute_name_mud_5flib_2eproto.base,
      &scc_info_enum_character_mud_5flib_2eproto.base,}};

static void InitDefaultsscc_info_character_book_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_character_book_default_instance_;
    new (ptr) ::mud::character_book();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::character_book::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_character_book_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_character_book_mud_5flib_2eproto}, {
      &scc_info_character_mud_5flib_2eproto.base,}};

static void InitDefaultsscc_info_enemy_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_enemy_default_instance_;
    new (ptr) ::mud::enemy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::enemy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_enemy_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_enemy_mud_5flib_2eproto}, {
      &scc_info_enum_direction_mud_5flib_2eproto.base,
      &scc_info_enum_atribute_name_mud_5flib_2eproto.base,
      &scc_info_enum_character_mud_5flib_2eproto.base,}};

static void InitDefaultsscc_info_enemy_book_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_enemy_book_default_instance_;
    new (ptr) ::mud::enemy_book();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::enemy_book::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_enemy_book_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_enemy_book_mud_5flib_2eproto}, {
      &scc_info_enemy_mud_5flib_2eproto.base,}};

static void InitDefaultsscc_info_enum_atribute_name_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_enum_atribute_name_default_instance_;
    new (ptr) ::mud::enum_atribute_name();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::enum_atribute_name::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_enum_atribute_name_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_enum_atribute_name_mud_5flib_2eproto}, {}};

static void InitDefaultsscc_info_enum_character_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_enum_character_default_instance_;
    new (ptr) ::mud::enum_character();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::enum_character::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_enum_character_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_enum_character_mud_5flib_2eproto}, {}};

static void InitDefaultsscc_info_enum_direction_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_enum_direction_default_instance_;
    new (ptr) ::mud::enum_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::enum_direction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_enum_direction_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_enum_direction_mud_5flib_2eproto}, {}};

static void InitDefaultsscc_info_location_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_location_default_instance_;
    new (ptr) ::mud::location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_location_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_location_mud_5flib_2eproto}, {}};

static void InitDefaultsscc_info_player_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_player_default_instance_;
    new (ptr) ::mud::player();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::player::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_player_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_player_mud_5flib_2eproto}, {}};

static void InitDefaultsscc_info_player_book_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_player_book_default_instance_;
    new (ptr) ::mud::player_book();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::player_book::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_player_book_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_player_book_mud_5flib_2eproto}, {
      &scc_info_player_mud_5flib_2eproto.base,}};

static void InitDefaultsscc_info_tile_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_tile_default_instance_;
    new (ptr) ::mud::tile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::tile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tile_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_tile_mud_5flib_2eproto}, {
      &scc_info_location_mud_5flib_2eproto.base,}};

static void InitDefaultsscc_info_tile_book_mud_5flib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mud::_tile_book_default_instance_;
    new (ptr) ::mud::tile_book();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mud::tile_book::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tile_book_mud_5flib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_tile_book_mud_5flib_2eproto}, {
      &scc_info_tile_mud_5flib_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mud_5flib_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mud_5flib_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mud_5flib_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mud_5flib_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::player, name_),
  PROTOBUF_FIELD_OFFSET(::mud::player, password_hash_),
  PROTOBUF_FIELD_OFFSET(::mud::player, id_),
  PROTOBUF_FIELD_OFFSET(::mud::player, id_characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::player_book, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::player_book, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::enum_character, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::enum_atribute_name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::enum_direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::enum_direction, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::character, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::character, name_),
  PROTOBUF_FIELD_OFFSET(::mud::character, id_),
  PROTOBUF_FIELD_OFFSET(::mud::character, tile_id_),
  PROTOBUF_FIELD_OFFSET(::mud::character, facing_),
  PROTOBUF_FIELD_OFFSET(::mud::character, attributes_),
  PROTOBUF_FIELD_OFFSET(::mud::character, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::enemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::enemy, name_),
  PROTOBUF_FIELD_OFFSET(::mud::enemy, id_),
  PROTOBUF_FIELD_OFFSET(::mud::enemy, tile_id_),
  PROTOBUF_FIELD_OFFSET(::mud::enemy, facing_),
  PROTOBUF_FIELD_OFFSET(::mud::enemy, attributes_),
  PROTOBUF_FIELD_OFFSET(::mud::enemy, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::character_book, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::character_book, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::enemy_book, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::enemy_book, enemies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::location, north_),
  PROTOBUF_FIELD_OFFSET(::mud::location, south_),
  PROTOBUF_FIELD_OFFSET(::mud::location, east_),
  PROTOBUF_FIELD_OFFSET(::mud::location, west_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::tile, id_),
  PROTOBUF_FIELD_OFFSET(::mud::tile, type_),
  PROTOBUF_FIELD_OFFSET(::mud::tile, neighbour_),
  PROTOBUF_FIELD_OFFSET(::mud::tile, occupant_type_),
  PROTOBUF_FIELD_OFFSET(::mud::tile, occupant_id_),
  PROTOBUF_FIELD_OFFSET(::mud::tile, mood_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mud::tile_book, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mud::tile_book, tiles_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mud::player)},
  { 9, -1, sizeof(::mud::player_book)},
  { 15, -1, sizeof(::mud::enum_character)},
  { 20, -1, sizeof(::mud::enum_atribute_name)},
  { 25, -1, sizeof(::mud::enum_direction)},
  { 31, -1, sizeof(::mud::character)},
  { 42, -1, sizeof(::mud::enemy)},
  { 53, -1, sizeof(::mud::character_book)},
  { 59, -1, sizeof(::mud::enemy_book)},
  { 65, -1, sizeof(::mud::location)},
  { 74, -1, sizeof(::mud::tile)},
  { 85, -1, sizeof(::mud::tile_book)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_player_book_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_enum_character_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_enum_atribute_name_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_enum_direction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_character_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_enemy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_character_book_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_enemy_book_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_tile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mud::_tile_book_default_instance_),
};

const char descriptor_table_protodef_mud_5flib_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmud_lib.proto\022\003mud\"P\n\006player\022\014\n\004name\030\001"
  " \001(\t\022\025\n\rpassword_hash\030\002 \001(\t\022\n\n\002id\030\003 \001(\003\022"
  "\025\n\rid_characters\030\004 \003(\003\"+\n\013player_book\022\034\n"
  "\007players\030\001 \003(\0132\013.mud.player\"F\n\016enum_char"
  "acter\"4\n\017character_state\022\010\n\004NONE\020\000\022\013\n\007WA"
  "LKING\020\001\022\n\n\006COMBAT\020\002\"]\n\022enum_atribute_nam"
  "e\"G\n\016attribute_name\022\010\n\004LIFE\020\000\022\014\n\010STRENGT"
  "H\020\001\022\013\n\007AGILITY\020\002\022\020\n\014INTELLIGENCE\020\003\"u\n\016en"
  "um_direction\022,\n\005value\030\001 \001(\0162\035.mud.enum_d"
  "irection.direction\"5\n\tdirection\022\t\n\005NORTH"
  "\020\000\022\t\n\005SOUTH\020\001\022\010\n\004EAST\020\002\022\010\n\004WEST\020\003\"\254\001\n\tch"
  "aracter\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\003\022\017\n\007til"
  "e_id\030\003 \001(\003\022#\n\006facing\030\004 \001(\0132\023.mud.enum_di"
  "rection\022+\n\nattributes\030\005 \003(\0132\027.mud.enum_a"
  "tribute_name\022\"\n\005state\030\006 \001(\0132\023.mud.enum_c"
  "haracter\"\250\001\n\005enemy\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002"
  " \001(\003\022\017\n\007tile_id\030\003 \001(\003\022#\n\006facing\030\004 \001(\0132\023."
  "mud.enum_direction\022+\n\nattributes\030\005 \003(\0132\027"
  ".mud.enum_atribute_name\022\"\n\005state\030\006 \001(\0132\023"
  ".mud.enum_character\"4\n\016character_book\022\"\n"
  "\ncharacters\030\001 \003(\0132\016.mud.character\")\n\nene"
  "my_book\022\033\n\007enemies\030\001 \003(\0132\n.mud.enemy\"D\n\010"
  "location\022\r\n\005north\030\001 \001(\003\022\r\n\005south\030\002 \001(\003\022\014"
  "\n\004east\030\003 \001(\003\022\014\n\004west\030\004 \001(\003\"\240\001\n\004tile\022\n\n\002i"
  "d\030\001 \001(\003\022\034\n\004type\030\002 \001(\0162\016.mud.tile_type\022 \n"
  "\tneighbour\030\003 \001(\0132\r.mud.location\022)\n\roccup"
  "ant_type\030\004 \001(\0162\022.mud.resident_type\022\023\n\013oc"
  "cupant_id\030\005 \001(\003\022\014\n\004mood\030\006 \001(\t\"%\n\ttile_bo"
  "ok\022\030\n\005tiles\030\001 \003(\0132\t.mud.tile*6\n\ttile_typ"
  "e\022\t\n\005EMPTY\020\000\022\010\n\004WALL\020\001\022\010\n\004TREE\020\002\022\n\n\006PORT"
  "AL\020\003*5\n\rresident_type\022\n\n\006NOBODY\020\000\022\r\n\tCHA"
  "RACTER\020\001\022\t\n\005ENEMY\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mud_5flib_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mud_5flib_2eproto_sccs[12] = {
  &scc_info_character_mud_5flib_2eproto.base,
  &scc_info_character_book_mud_5flib_2eproto.base,
  &scc_info_enemy_mud_5flib_2eproto.base,
  &scc_info_enemy_book_mud_5flib_2eproto.base,
  &scc_info_enum_atribute_name_mud_5flib_2eproto.base,
  &scc_info_enum_character_mud_5flib_2eproto.base,
  &scc_info_enum_direction_mud_5flib_2eproto.base,
  &scc_info_location_mud_5flib_2eproto.base,
  &scc_info_player_mud_5flib_2eproto.base,
  &scc_info_player_book_mud_5flib_2eproto.base,
  &scc_info_tile_mud_5flib_2eproto.base,
  &scc_info_tile_book_mud_5flib_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mud_5flib_2eproto_once;
static bool descriptor_table_mud_5flib_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mud_5flib_2eproto = {
  &descriptor_table_mud_5flib_2eproto_initialized, descriptor_table_protodef_mud_5flib_2eproto, "mud_lib.proto", 1267,
  &descriptor_table_mud_5flib_2eproto_once, descriptor_table_mud_5flib_2eproto_sccs, descriptor_table_mud_5flib_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_mud_5flib_2eproto::offsets,
  file_level_metadata_mud_5flib_2eproto, 12, file_level_enum_descriptors_mud_5flib_2eproto, file_level_service_descriptors_mud_5flib_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mud_5flib_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mud_5flib_2eproto), true);
namespace mud {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_character_character_state_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5flib_2eproto);
  return file_level_enum_descriptors_mud_5flib_2eproto[0];
}
bool enum_character_character_state_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr enum_character_character_state enum_character::NONE;
constexpr enum_character_character_state enum_character::WALKING;
constexpr enum_character_character_state enum_character::COMBAT;
constexpr enum_character_character_state enum_character::character_state_MIN;
constexpr enum_character_character_state enum_character::character_state_MAX;
constexpr int enum_character::character_state_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_atribute_name_attribute_name_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5flib_2eproto);
  return file_level_enum_descriptors_mud_5flib_2eproto[1];
}
bool enum_atribute_name_attribute_name_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr enum_atribute_name_attribute_name enum_atribute_name::LIFE;
constexpr enum_atribute_name_attribute_name enum_atribute_name::STRENGTH;
constexpr enum_atribute_name_attribute_name enum_atribute_name::AGILITY;
constexpr enum_atribute_name_attribute_name enum_atribute_name::INTELLIGENCE;
constexpr enum_atribute_name_attribute_name enum_atribute_name::attribute_name_MIN;
constexpr enum_atribute_name_attribute_name enum_atribute_name::attribute_name_MAX;
constexpr int enum_atribute_name::attribute_name_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_direction_direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5flib_2eproto);
  return file_level_enum_descriptors_mud_5flib_2eproto[2];
}
bool enum_direction_direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr enum_direction_direction enum_direction::NORTH;
constexpr enum_direction_direction enum_direction::SOUTH;
constexpr enum_direction_direction enum_direction::EAST;
constexpr enum_direction_direction enum_direction::WEST;
constexpr enum_direction_direction enum_direction::direction_MIN;
constexpr enum_direction_direction enum_direction::direction_MAX;
constexpr int enum_direction::direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* tile_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5flib_2eproto);
  return file_level_enum_descriptors_mud_5flib_2eproto[3];
}
bool tile_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* resident_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mud_5flib_2eproto);
  return file_level_enum_descriptors_mud_5flib_2eproto[4];
}
bool resident_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void player::InitAsDefaultInstance() {
}
class player::_Internal {
 public:
};

player::player()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.player)
}
player::player(const player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      id_characters_(from.id_characters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password_hash().empty()) {
    password_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_hash_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mud.player)
}

void player::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_player_mud_5flib_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

player::~player() {
  // @@protoc_insertion_point(destructor:mud.player)
  SharedDtor();
}

void player::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const player& player::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_player_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void player::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_characters_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "mud.player.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_password_hash(), ptr, ctx, "mud.player.password_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 id_characters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_id_characters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_id_characters(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* player::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mud.player.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password_hash = 2;
  if (this->password_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_hash().data(), static_cast<int>(this->_internal_password_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mud.player.password_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_hash(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  // repeated int64 id_characters = 4;
  {
    int byte_size = _id_characters_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_id_characters(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.player)
  return target;
}

size_t player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 id_characters = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->id_characters_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_characters_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password_hash = 2;
  if (this->password_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_hash());
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.player)
  GOOGLE_DCHECK_NE(&from, this);
  const player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.player)
    MergeFrom(*source);
  }
}

void player::MergeFrom(const player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_characters_.MergeFrom(from.id_characters_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password_hash().size() > 0) {

    password_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_hash_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player::CopyFrom(const player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player::IsInitialized() const {
  return true;
}

void player::InternalSwap(player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_characters_.InternalSwap(&other->id_characters_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_hash_.Swap(&other->password_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void player_book::InitAsDefaultInstance() {
}
class player_book::_Internal {
 public:
};

player_book::player_book()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.player_book)
}
player_book::player_book(const player_book& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mud.player_book)
}

void player_book::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_player_book_mud_5flib_2eproto.base);
}

player_book::~player_book() {
  // @@protoc_insertion_point(destructor:mud.player_book)
  SharedDtor();
}

void player_book::SharedDtor() {
}

void player_book::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const player_book& player_book::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_player_book_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void player_book::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.player_book)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear();
}

const char* player_book::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mud.player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* player_book::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.player_book)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mud.player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.player_book)
  return target;
}

size_t player_book::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.player_book)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mud.player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void player_book::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.player_book)
  GOOGLE_DCHECK_NE(&from, this);
  const player_book* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<player_book>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.player_book)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.player_book)
    MergeFrom(*source);
  }
}

void player_book::MergeFrom(const player_book& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.player_book)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void player_book::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.player_book)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_book::CopyFrom(const player_book& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.player_book)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_book::IsInitialized() const {
  return true;
}

void player_book::InternalSwap(player_book* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata player_book::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void enum_character::InitAsDefaultInstance() {
}
class enum_character::_Internal {
 public:
};

enum_character::enum_character()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.enum_character)
}
enum_character::enum_character(const enum_character& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mud.enum_character)
}

void enum_character::SharedCtor() {
}

enum_character::~enum_character() {
  // @@protoc_insertion_point(destructor:mud.enum_character)
  SharedDtor();
}

void enum_character::SharedDtor() {
}

void enum_character::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const enum_character& enum_character::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_enum_character_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void enum_character::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.enum_character)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* enum_character::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* enum_character::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.enum_character)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.enum_character)
  return target;
}

size_t enum_character::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.enum_character)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void enum_character::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.enum_character)
  GOOGLE_DCHECK_NE(&from, this);
  const enum_character* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<enum_character>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.enum_character)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.enum_character)
    MergeFrom(*source);
  }
}

void enum_character::MergeFrom(const enum_character& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.enum_character)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void enum_character::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.enum_character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enum_character::CopyFrom(const enum_character& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.enum_character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enum_character::IsInitialized() const {
  return true;
}

void enum_character::InternalSwap(enum_character* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata enum_character::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void enum_atribute_name::InitAsDefaultInstance() {
}
class enum_atribute_name::_Internal {
 public:
};

enum_atribute_name::enum_atribute_name()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.enum_atribute_name)
}
enum_atribute_name::enum_atribute_name(const enum_atribute_name& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mud.enum_atribute_name)
}

void enum_atribute_name::SharedCtor() {
}

enum_atribute_name::~enum_atribute_name() {
  // @@protoc_insertion_point(destructor:mud.enum_atribute_name)
  SharedDtor();
}

void enum_atribute_name::SharedDtor() {
}

void enum_atribute_name::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const enum_atribute_name& enum_atribute_name::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_enum_atribute_name_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void enum_atribute_name::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.enum_atribute_name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* enum_atribute_name::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* enum_atribute_name::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.enum_atribute_name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.enum_atribute_name)
  return target;
}

size_t enum_atribute_name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.enum_atribute_name)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void enum_atribute_name::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.enum_atribute_name)
  GOOGLE_DCHECK_NE(&from, this);
  const enum_atribute_name* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<enum_atribute_name>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.enum_atribute_name)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.enum_atribute_name)
    MergeFrom(*source);
  }
}

void enum_atribute_name::MergeFrom(const enum_atribute_name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.enum_atribute_name)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void enum_atribute_name::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.enum_atribute_name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enum_atribute_name::CopyFrom(const enum_atribute_name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.enum_atribute_name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enum_atribute_name::IsInitialized() const {
  return true;
}

void enum_atribute_name::InternalSwap(enum_atribute_name* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata enum_atribute_name::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void enum_direction::InitAsDefaultInstance() {
}
class enum_direction::_Internal {
 public:
};

enum_direction::enum_direction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.enum_direction)
}
enum_direction::enum_direction(const enum_direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:mud.enum_direction)
}

void enum_direction::SharedCtor() {
  value_ = 0;
}

enum_direction::~enum_direction() {
  // @@protoc_insertion_point(destructor:mud.enum_direction)
  SharedDtor();
}

void enum_direction::SharedDtor() {
}

void enum_direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const enum_direction& enum_direction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_enum_direction_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void enum_direction::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.enum_direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* enum_direction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mud.enum_direction.direction value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::mud::enum_direction_direction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* enum_direction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.enum_direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mud.enum_direction.direction value = 1;
  if (this->value() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.enum_direction)
  return target;
}

size_t enum_direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.enum_direction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mud.enum_direction.direction value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void enum_direction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.enum_direction)
  GOOGLE_DCHECK_NE(&from, this);
  const enum_direction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<enum_direction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.enum_direction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.enum_direction)
    MergeFrom(*source);
  }
}

void enum_direction::MergeFrom(const enum_direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.enum_direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void enum_direction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.enum_direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enum_direction::CopyFrom(const enum_direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.enum_direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enum_direction::IsInitialized() const {
  return true;
}

void enum_direction::InternalSwap(enum_direction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata enum_direction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void character::InitAsDefaultInstance() {
  ::mud::_character_default_instance_._instance.get_mutable()->facing_ = const_cast< ::mud::enum_direction*>(
      ::mud::enum_direction::internal_default_instance());
  ::mud::_character_default_instance_._instance.get_mutable()->state_ = const_cast< ::mud::enum_character*>(
      ::mud::enum_character::internal_default_instance());
}
class character::_Internal {
 public:
  static const ::mud::enum_direction& facing(const character* msg);
  static const ::mud::enum_character& state(const character* msg);
};

const ::mud::enum_direction&
character::_Internal::facing(const character* msg) {
  return *msg->facing_;
}
const ::mud::enum_character&
character::_Internal::state(const character* msg) {
  return *msg->state_;
}
character::character()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.character)
}
character::character(const character& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_facing()) {
    facing_ = new ::mud::enum_direction(*from.facing_);
  } else {
    facing_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::mud::enum_character(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tile_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(tile_id_));
  // @@protoc_insertion_point(copy_constructor:mud.character)
}

void character::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_character_mud_5flib_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&facing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tile_id_) -
      reinterpret_cast<char*>(&facing_)) + sizeof(tile_id_));
}

character::~character() {
  // @@protoc_insertion_point(destructor:mud.character)
  SharedDtor();
}

void character::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete facing_;
  if (this != internal_default_instance()) delete state_;
}

void character::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const character& character::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_character_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void character::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.character)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && facing_ != nullptr) {
    delete facing_;
  }
  facing_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tile_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(tile_id_));
  _internal_metadata_.Clear();
}

const char* character::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "mud.character.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tile_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mud.enum_direction facing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_facing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mud.enum_atribute_name attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .mud.enum_character state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* character::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.character)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mud.character.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // int64 tile_id = 3;
  if (this->tile_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_tile_id(), target);
  }

  // .mud.enum_direction facing = 4;
  if (this->has_facing()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::facing(this), target, stream);
  }

  // repeated .mud.enum_atribute_name attributes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_attributes(i), target, stream);
  }

  // .mud.enum_character state = 6;
  if (this->has_state()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.character)
  return target;
}

size_t character::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.character)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mud.enum_atribute_name attributes = 5;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mud.enum_direction facing = 4;
  if (this->has_facing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *facing_);
  }

  // .mud.enum_character state = 6;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 tile_id = 3;
  if (this->tile_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tile_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void character::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.character)
  GOOGLE_DCHECK_NE(&from, this);
  const character* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<character>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.character)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.character)
    MergeFrom(*source);
  }
}

void character::MergeFrom(const character& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.character)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_facing()) {
    _internal_mutable_facing()->::mud::enum_direction::MergeFrom(from._internal_facing());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::mud::enum_character::MergeFrom(from._internal_state());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.tile_id() != 0) {
    _internal_set_tile_id(from._internal_tile_id());
  }
}

void character::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void character::CopyFrom(const character& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool character::IsInitialized() const {
  return true;
}

void character::InternalSwap(character* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(facing_, other->facing_);
  swap(state_, other->state_);
  swap(id_, other->id_);
  swap(tile_id_, other->tile_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata character::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void enemy::InitAsDefaultInstance() {
  ::mud::_enemy_default_instance_._instance.get_mutable()->facing_ = const_cast< ::mud::enum_direction*>(
      ::mud::enum_direction::internal_default_instance());
  ::mud::_enemy_default_instance_._instance.get_mutable()->state_ = const_cast< ::mud::enum_character*>(
      ::mud::enum_character::internal_default_instance());
}
class enemy::_Internal {
 public:
  static const ::mud::enum_direction& facing(const enemy* msg);
  static const ::mud::enum_character& state(const enemy* msg);
};

const ::mud::enum_direction&
enemy::_Internal::facing(const enemy* msg) {
  return *msg->facing_;
}
const ::mud::enum_character&
enemy::_Internal::state(const enemy* msg) {
  return *msg->state_;
}
enemy::enemy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.enemy)
}
enemy::enemy(const enemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_facing()) {
    facing_ = new ::mud::enum_direction(*from.facing_);
  } else {
    facing_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::mud::enum_character(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tile_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(tile_id_));
  // @@protoc_insertion_point(copy_constructor:mud.enemy)
}

void enemy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_enemy_mud_5flib_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&facing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tile_id_) -
      reinterpret_cast<char*>(&facing_)) + sizeof(tile_id_));
}

enemy::~enemy() {
  // @@protoc_insertion_point(destructor:mud.enemy)
  SharedDtor();
}

void enemy::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete facing_;
  if (this != internal_default_instance()) delete state_;
}

void enemy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const enemy& enemy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_enemy_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void enemy::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.enemy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && facing_ != nullptr) {
    delete facing_;
  }
  facing_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tile_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(tile_id_));
  _internal_metadata_.Clear();
}

const char* enemy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "mud.enemy.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tile_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mud.enum_direction facing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_facing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mud.enum_atribute_name attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .mud.enum_character state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* enemy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.enemy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mud.enemy.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // int64 tile_id = 3;
  if (this->tile_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_tile_id(), target);
  }

  // .mud.enum_direction facing = 4;
  if (this->has_facing()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::facing(this), target, stream);
  }

  // repeated .mud.enum_atribute_name attributes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_attributes(i), target, stream);
  }

  // .mud.enum_character state = 6;
  if (this->has_state()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.enemy)
  return target;
}

size_t enemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.enemy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mud.enum_atribute_name attributes = 5;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mud.enum_direction facing = 4;
  if (this->has_facing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *facing_);
  }

  // .mud.enum_character state = 6;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 tile_id = 3;
  if (this->tile_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tile_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void enemy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.enemy)
  GOOGLE_DCHECK_NE(&from, this);
  const enemy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<enemy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.enemy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.enemy)
    MergeFrom(*source);
  }
}

void enemy::MergeFrom(const enemy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.enemy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_facing()) {
    _internal_mutable_facing()->::mud::enum_direction::MergeFrom(from._internal_facing());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::mud::enum_character::MergeFrom(from._internal_state());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.tile_id() != 0) {
    _internal_set_tile_id(from._internal_tile_id());
  }
}

void enemy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.enemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enemy::CopyFrom(const enemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.enemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enemy::IsInitialized() const {
  return true;
}

void enemy::InternalSwap(enemy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(facing_, other->facing_);
  swap(state_, other->state_);
  swap(id_, other->id_);
  swap(tile_id_, other->tile_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata enemy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void character_book::InitAsDefaultInstance() {
}
class character_book::_Internal {
 public:
};

character_book::character_book()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.character_book)
}
character_book::character_book(const character_book& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mud.character_book)
}

void character_book::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_character_book_mud_5flib_2eproto.base);
}

character_book::~character_book() {
  // @@protoc_insertion_point(destructor:mud.character_book)
  SharedDtor();
}

void character_book::SharedDtor() {
}

void character_book::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const character_book& character_book::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_character_book_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void character_book::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.character_book)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  _internal_metadata_.Clear();
}

const char* character_book::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mud.character characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* character_book::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.character_book)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mud.character characters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.character_book)
  return target;
}

size_t character_book::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.character_book)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mud.character characters = 1;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void character_book::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.character_book)
  GOOGLE_DCHECK_NE(&from, this);
  const character_book* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<character_book>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.character_book)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.character_book)
    MergeFrom(*source);
  }
}

void character_book::MergeFrom(const character_book& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.character_book)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
}

void character_book::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.character_book)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void character_book::CopyFrom(const character_book& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.character_book)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool character_book::IsInitialized() const {
  return true;
}

void character_book::InternalSwap(character_book* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata character_book::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void enemy_book::InitAsDefaultInstance() {
}
class enemy_book::_Internal {
 public:
};

enemy_book::enemy_book()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.enemy_book)
}
enemy_book::enemy_book(const enemy_book& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      enemies_(from.enemies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mud.enemy_book)
}

void enemy_book::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_enemy_book_mud_5flib_2eproto.base);
}

enemy_book::~enemy_book() {
  // @@protoc_insertion_point(destructor:mud.enemy_book)
  SharedDtor();
}

void enemy_book::SharedDtor() {
}

void enemy_book::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const enemy_book& enemy_book::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_enemy_book_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void enemy_book::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.enemy_book)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enemies_.Clear();
  _internal_metadata_.Clear();
}

const char* enemy_book::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mud.enemy enemies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enemies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* enemy_book::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.enemy_book)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mud.enemy enemies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enemies_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_enemies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.enemy_book)
  return target;
}

size_t enemy_book::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.enemy_book)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mud.enemy enemies = 1;
  total_size += 1UL * this->_internal_enemies_size();
  for (const auto& msg : this->enemies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void enemy_book::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.enemy_book)
  GOOGLE_DCHECK_NE(&from, this);
  const enemy_book* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<enemy_book>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.enemy_book)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.enemy_book)
    MergeFrom(*source);
  }
}

void enemy_book::MergeFrom(const enemy_book& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.enemy_book)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enemies_.MergeFrom(from.enemies_);
}

void enemy_book::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.enemy_book)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enemy_book::CopyFrom(const enemy_book& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.enemy_book)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enemy_book::IsInitialized() const {
  return true;
}

void enemy_book::InternalSwap(enemy_book* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  enemies_.InternalSwap(&other->enemies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata enemy_book::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void location::InitAsDefaultInstance() {
}
class location::_Internal {
 public:
};

location::location()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.location)
}
location::location(const location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&north_, &from.north_,
    static_cast<size_t>(reinterpret_cast<char*>(&west_) -
    reinterpret_cast<char*>(&north_)) + sizeof(west_));
  // @@protoc_insertion_point(copy_constructor:mud.location)
}

void location::SharedCtor() {
  ::memset(&north_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&west_) -
      reinterpret_cast<char*>(&north_)) + sizeof(west_));
}

location::~location() {
  // @@protoc_insertion_point(destructor:mud.location)
  SharedDtor();
}

void location::SharedDtor() {
}

void location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const location& location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_location_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void location::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&west_) -
      reinterpret_cast<char*>(&north_)) + sizeof(west_));
  _internal_metadata_.Clear();
}

const char* location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 north = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          north_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 south = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          south_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 east = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          east_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 west = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          west_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* location::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 north = 1;
  if (this->north() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_north(), target);
  }

  // int64 south = 2;
  if (this->south() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_south(), target);
  }

  // int64 east = 3;
  if (this->east() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_east(), target);
  }

  // int64 west = 4;
  if (this->west() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_west(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.location)
  return target;
}

size_t location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 north = 1;
  if (this->north() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_north());
  }

  // int64 south = 2;
  if (this->south() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_south());
  }

  // int64 east = 3;
  if (this->east() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_east());
  }

  // int64 west = 4;
  if (this->west() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_west());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.location)
  GOOGLE_DCHECK_NE(&from, this);
  const location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.location)
    MergeFrom(*source);
  }
}

void location::MergeFrom(const location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.north() != 0) {
    _internal_set_north(from._internal_north());
  }
  if (from.south() != 0) {
    _internal_set_south(from._internal_south());
  }
  if (from.east() != 0) {
    _internal_set_east(from._internal_east());
  }
  if (from.west() != 0) {
    _internal_set_west(from._internal_west());
  }
}

void location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location::CopyFrom(const location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location::IsInitialized() const {
  return true;
}

void location::InternalSwap(location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(north_, other->north_);
  swap(south_, other->south_);
  swap(east_, other->east_);
  swap(west_, other->west_);
}

::PROTOBUF_NAMESPACE_ID::Metadata location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tile::InitAsDefaultInstance() {
  ::mud::_tile_default_instance_._instance.get_mutable()->neighbour_ = const_cast< ::mud::location*>(
      ::mud::location::internal_default_instance());
}
class tile::_Internal {
 public:
  static const ::mud::location& neighbour(const tile* msg);
};

const ::mud::location&
tile::_Internal::neighbour(const tile* msg) {
  return *msg->neighbour_;
}
tile::tile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.tile)
}
tile::tile(const tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mood_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mood().empty()) {
    mood_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mood_);
  }
  if (from._internal_has_neighbour()) {
    neighbour_ = new ::mud::location(*from.neighbour_);
  } else {
    neighbour_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupant_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(occupant_id_));
  // @@protoc_insertion_point(copy_constructor:mud.tile)
}

void tile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tile_mud_5flib_2eproto.base);
  mood_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&neighbour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupant_id_) -
      reinterpret_cast<char*>(&neighbour_)) + sizeof(occupant_id_));
}

tile::~tile() {
  // @@protoc_insertion_point(destructor:mud.tile)
  SharedDtor();
}

void tile::SharedDtor() {
  mood_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete neighbour_;
}

void tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tile& tile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tile_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void tile::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mood_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && neighbour_ != nullptr) {
    delete neighbour_;
  }
  neighbour_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupant_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(occupant_id_));
  _internal_metadata_.Clear();
}

const char* tile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mud.tile_type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mud::tile_type>(val));
        } else goto handle_unusual;
        continue;
      // .mud.location neighbour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbour(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mud.resident_type occupant_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_occupant_type(static_cast<::mud::resident_type>(val));
        } else goto handle_unusual;
        continue;
      // int64 occupant_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          occupant_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mood = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_mood(), ptr, ctx, "mud.tile.mood");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tile::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // .mud.tile_type type = 2;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .mud.location neighbour = 3;
  if (this->has_neighbour()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::neighbour(this), target, stream);
  }

  // .mud.resident_type occupant_type = 4;
  if (this->occupant_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_occupant_type(), target);
  }

  // int64 occupant_id = 5;
  if (this->occupant_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_occupant_id(), target);
  }

  // string mood = 6;
  if (this->mood().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mood().data(), static_cast<int>(this->_internal_mood().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mud.tile.mood");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mood(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.tile)
  return target;
}

size_t tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.tile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mood = 6;
  if (this->mood().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mood());
  }

  // .mud.location neighbour = 3;
  if (this->has_neighbour()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbour_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // .mud.tile_type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .mud.resident_type occupant_type = 4;
  if (this->occupant_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_occupant_type());
  }

  // int64 occupant_id = 5;
  if (this->occupant_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_occupant_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.tile)
  GOOGLE_DCHECK_NE(&from, this);
  const tile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.tile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.tile)
    MergeFrom(*source);
  }
}

void tile::MergeFrom(const tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.tile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mood().size() > 0) {

    mood_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mood_);
  }
  if (from.has_neighbour()) {
    _internal_mutable_neighbour()->::mud::location::MergeFrom(from._internal_neighbour());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.occupant_type() != 0) {
    _internal_set_occupant_type(from._internal_occupant_type());
  }
  if (from.occupant_id() != 0) {
    _internal_set_occupant_id(from._internal_occupant_id());
  }
}

void tile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tile::CopyFrom(const tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tile::IsInitialized() const {
  return true;
}

void tile::InternalSwap(tile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mood_.Swap(&other->mood_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(neighbour_, other->neighbour_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(occupant_type_, other->occupant_type_);
  swap(occupant_id_, other->occupant_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tile_book::InitAsDefaultInstance() {
}
class tile_book::_Internal {
 public:
};

tile_book::tile_book()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mud.tile_book)
}
tile_book::tile_book(const tile_book& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mud.tile_book)
}

void tile_book::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tile_book_mud_5flib_2eproto.base);
}

tile_book::~tile_book() {
  // @@protoc_insertion_point(destructor:mud.tile_book)
  SharedDtor();
}

void tile_book::SharedDtor() {
}

void tile_book::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tile_book& tile_book::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tile_book_mud_5flib_2eproto.base);
  return *internal_default_instance();
}


void tile_book::Clear() {
// @@protoc_insertion_point(message_clear_start:mud.tile_book)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  _internal_metadata_.Clear();
}

const char* tile_book::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mud.tile tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tile_book::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mud.tile_book)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mud.tile tiles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_tiles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mud.tile_book)
  return target;
}

size_t tile_book::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mud.tile_book)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mud.tile tiles = 1;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tile_book::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mud.tile_book)
  GOOGLE_DCHECK_NE(&from, this);
  const tile_book* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tile_book>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mud.tile_book)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mud.tile_book)
    MergeFrom(*source);
  }
}

void tile_book::MergeFrom(const tile_book& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mud.tile_book)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
}

void tile_book::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mud.tile_book)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tile_book::CopyFrom(const tile_book& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mud.tile_book)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tile_book::IsInitialized() const {
  return true;
}

void tile_book::InternalSwap(tile_book* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tile_book::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mud
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mud::player* Arena::CreateMaybeMessage< ::mud::player >(Arena* arena) {
  return Arena::CreateInternal< ::mud::player >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::player_book* Arena::CreateMaybeMessage< ::mud::player_book >(Arena* arena) {
  return Arena::CreateInternal< ::mud::player_book >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::enum_character* Arena::CreateMaybeMessage< ::mud::enum_character >(Arena* arena) {
  return Arena::CreateInternal< ::mud::enum_character >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::enum_atribute_name* Arena::CreateMaybeMessage< ::mud::enum_atribute_name >(Arena* arena) {
  return Arena::CreateInternal< ::mud::enum_atribute_name >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::enum_direction* Arena::CreateMaybeMessage< ::mud::enum_direction >(Arena* arena) {
  return Arena::CreateInternal< ::mud::enum_direction >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::character* Arena::CreateMaybeMessage< ::mud::character >(Arena* arena) {
  return Arena::CreateInternal< ::mud::character >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::enemy* Arena::CreateMaybeMessage< ::mud::enemy >(Arena* arena) {
  return Arena::CreateInternal< ::mud::enemy >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::character_book* Arena::CreateMaybeMessage< ::mud::character_book >(Arena* arena) {
  return Arena::CreateInternal< ::mud::character_book >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::enemy_book* Arena::CreateMaybeMessage< ::mud::enemy_book >(Arena* arena) {
  return Arena::CreateInternal< ::mud::enemy_book >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::location* Arena::CreateMaybeMessage< ::mud::location >(Arena* arena) {
  return Arena::CreateInternal< ::mud::location >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::tile* Arena::CreateMaybeMessage< ::mud::tile >(Arena* arena) {
  return Arena::CreateInternal< ::mud::tile >(arena);
}
template<> PROTOBUF_NOINLINE ::mud::tile_book* Arena::CreateMaybeMessage< ::mud::tile_book >(Arena* arena) {
  return Arena::CreateInternal< ::mud::tile_book >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
